// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

generator nestjsDto {
  provider                        = "prisma-generator-nestjs-dto"
  output                          = "../generated"
  outputToNestJsResourceStructure = "true"
  exportRelationModifierClasses   = "true"
  reExport                        = "false"
  createDtoPrefix                 = "Create"
  updateDtoPrefix                 = "Update"
  dtoSuffix                       = "Dto"
  entityPrefix                    = ""
  entitySuffix                    = ""
  fileNamingStyle                 = "camel"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum USER_TYPES {
  SUPER_ADMIN
  ADMIN
  HR
  EMPLOYEE
  ANONYMOUS
}

model User {
  id                 String              @id @default(uuid())
  createdAt          DateTime            @default(now())
  updatedAt          DateTime            @default(now()) @updatedAt
  email              String              @unique
  name               String?
  designation        String?
  mobileNumber       String?
  type               USER_TYPES          @default(ANONYMOUS)
  Company            Company?
  Employee           Employee?
  SocialMediaProfile SocialMediaProfile?

  @@map("Users")
}

model Company {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  name      String
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @unique

  @@map("Companies")
}

model Employee {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @unique

  @@map("Employees")
}

model SocialMediaProfile {
  id        String   @id @default(uuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
  facebook  String?
  twitter   String?
  linkedIn  String?
  github    String?
  website   String?
  User      User     @relation(fields: [userId], references: [id])
  userId    String   @unique

  @@map("SocialMediaProfiles")
}
